name: Build and test skaled
on:
  push:
    branches-ignore:
      - 'develop'
      - 'master'
      - 'beta'
      - 'stable'
defaults:
  run:
    shell: bash
jobs:
  build:
    runs-on: self-hosted
    env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        NO_ULIMIT_CHECK: 1
    steps:
      - name: Extract repo name
        run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')
        shell: bash
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - name: checkout
        uses: actions/checkout@v2

      - name: update apt
        run: sudo add-apt-repository ppa:ubuntu-toolchain-r/test; sudo apt-get update
      - name: install packages
        run: |
          sudo apt-get -y remove libzmq* || true
          sudo apt-get -y install software-properties-common
          sudo apt-get -y install gcc-9 g++-9

      - name: Use g++-9 and gcov-9 by default
        run: |
          echo "Updating all needed alternatives"
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9
          sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-9 9
          sudo update-alternatives --install /usr/bin/gcov-dump gcov-dump /usr/bin/gcov-dump-9 9
          sudo update-alternatives --install /usr/bin/gcov-tool gcov-tool /usr/bin/gcov-tool-9 9
          echo "Checking alternative for gcc"
          which gcc
          gcc --version
          echo "Checking alternative for g++"
          which g++
          g++ --version
          echo "Checking alternative for gcov"
          which gcov
          gcov --version
          echo "Checking alternative for gcov-dump"
          which gcov-dump
          gcov-dump --version
          echo "Checking alternative for gcov-tool"
          which gcov-tool
          gcov-tool --version

      - name: Get newest lcov
        run: |
          # sudo apt-get install libcapture-tiny-perl
          echo "Removing previous lcov version..."
          sudo apt-get remove lcov || true
          echo "Installing newest lcov version..."
          rm -rf newer_lcov || true
          mkdir newer_lcov
          cd newer_lcov
          git clone https://github.com/linux-test-project/lcov --recursive --recurse-submodules
          cd lcov
          git checkout 92e2121
          sudo make install
          cd ..
          cd ..
          echo "Checking installed lcov version..."
          which lcov
          lcov --version

      - name: Submodule update
        run: |
          rm -rf ./libconsensus || true
          ls -1
          git submodule update --init --recursive

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
      - name: Ccache cache files
        uses: actions/cache@v1.1.0
        with:
          path: .ccache
          key: ${ { matrix.config.name } }-ccache-${ { steps.ccache_cache_timestamp.outputs.timestamp } }
          restore-keys: |
            ${ { matrix.config.name } }-ccache-
      - name: Update gcc-9
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9

      - name: Test clang-format
        run: |
          clang-format --help
          clang-format --version

      - name: Build dependencies
        run: |
          export CC=gcc-9
          export CXX=g++-9
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          cd deps
          #######################################./clean.sh
          rm -f ./libwebsockets-from-git.tar.gz
          ./build.sh DEBUG=1 PARALLEL_COUNT=$(nproc)
          cd ..
      - name: Configure all
        run: |
          export CC=gcc-9
          export CXX=g++-9
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          mkdir -p build
          cd build
          # -DCMAKE_C_FLAGS=-O3 -DCMAKE_CXX_FLAGS=-O3
          cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DCOVERAGE=$CODE_COVERAGE ..
          cd ..
      - name: Format-check source code
        run: |
          export CC=gcc-9
          export CXX=g++-9
          export TARGET=all
          export CMAKE_BUILD_TYPE=Release
          export CODE_COVERAGE=ON
          cd build
          make format-check
          cd ..
      - name: Build all
        run: |
          export CC=gcc-9
          export CXX=g++-9
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          cd build
          make testeth -j$(nproc)
          cd ..
      - name: Testeth
        run : |
          cd build/test
          NO_NTP_CHECK=1 NO_ULIMIT_CHECK=1 ./testeth -- --express --verbosity 4
          sudo NO_ULIMIT_CHECK=1 NO_NTP_CHECK=1 ./testeth -t BtrfsTestSuite -- --all --verbosity 4
          sudo NO_ULIMIT_CHECK=1 NO_NTP_CHECK=1 ./testeth -t HashSnapshotTestSuite -- --all --verbosity 4
          sudo NO_ULIMIT_CHECK=1 NO_NTP_CHECK=1 ./testeth -t ClientSnapshotsSuite -- --all --verbosity 4
          cd ..
          # Create lcov report
          #lcov --capture --directory . --output-file coverage.info
          #lcov --remove coverage.info '/usr/*' --output-file coverage.info # filter system-files
          #lcov --remove coverage.info 'deps/*' --output-file coverage.info # filter dependency files
          #lcov --remove coverage.info 'libconsensus/deps/*' --output-file coverage.info # filter dependency files --ignore-errors unused 
          #lcov --remove coverage.info 'libconsensus/libBLS/deps/*' --output-file coverage.info # filter dependency files --ignore-errors unused
          #lcov --remove coverage.info '.hunter/*' --output-file coverage.info # filter dependency files
          #- lcov --list coverage.info # debug info

          # Uploading report to CodeCov
          #  bash <(curl -s https://codecov.io/bash) -f coverage.info -t $CODECOV_TOKEN || echo "Codecov did not collect coverage reports"
      - run: |
          sudo umount build/test/btrfs || true
          sudo rm -rf /tmp/tmp*
          sudo rm -rf /tmp/*.db
        if: ${{ always() }}
        continue-on-error: true
