name: Build and test skaled
on:
  push:
    branches-ignore:
      - 'develop'
      - 'master'
      - 'beta'
      - 'stable'
defaults:
  run:
    shell: bash
jobs:
  build:
    runs-on: self-hosted
    env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        NO_ULIMIT_CHECK: 1
    steps:
      - name: Extract repo name
        run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')
        shell: bash
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - name: checkout
        uses: actions/checkout@v2
      - name: Submodule update
        run: git submodule update --init --recursive
      - name: update apt
        run: sudo add-apt-repository ppa:ubuntu-toolchain-r/test;

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
      - name: Ccache cache files
        uses: actions/cache@v1.1.0
        with:
          path: .ccache
          key: ${ { matrix.config.name } }-ccache-${ { steps.ccache_cache_timestamp.outputs.timestamp } }
          restore-keys: |
            ${ { matrix.config.name } }-ccache-
      - name: Build dependencies
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get --yes install libgcrypt20-dev
          export CC=gcc-7
          export CXX=g++-7
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          cd deps
          ./clean.sh
          rm -f ./libwebsockets-from-git.tar.gz
          ./build.sh PARALLEL_COUNT=$(nproc)
          cd ..
      - name: Configure all
        run: |
          export CC=gcc-7
          export CXX=g++-7
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DCMAKE_CXX_FLAGS=-O3 -DCMAKE_C_FLAGS=-O3 -DCOVERAGE=$CODE_COVERAGE ..
          cd ..
      - name: Format-check source code
        run: |
          export CC=gcc-7
          export CXX=g++-7
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          cd build
          make format-check
          cd ..
      - name: Build all
        run: |
          export CC=gcc-7
          export CXX=g++-7
          export TARGET=all
          export CMAKE_BUILD_TYPE=Debug
          export CODE_COVERAGE=ON
          cd build
          make -j$(nproc)
          cd ..
      - name: Testeth
        run : |
          cd build/test
          NO_NTP_CHECK=1 NO_ULIMIT_CHECK=1 ./testeth -- --express --verbosity 4
          sudo NO_ULIMIT_CHECK=1 NO_NTP_CHECK=1 ./testeth -t BtrfsTestSuite -- --all --verbosity 4
          sudo NO_ULIMIT_CHECK=1 NO_NTP_CHECK=1 ./testeth -t HashSnapshotTestSuite -- --all --verbosity 4
          sudo NO_ULIMIT_CHECK=1 NO_NTP_CHECK=1 ./testeth -t ClientSnapshotsSuite -- --all --verbosity 4
          cd ..
          # Create lcov report
          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info # filter system-files
          lcov --remove coverage.info 'deps/*' --output-file coverage.info # filter dependency files
          lcov --remove coverage.info 'libconsensus/deps/*' --output-file coverage.info # filter dependency files
          lcov --remove coverage.info 'libconsensus/libBLS/deps/*' --output-file coverage.info # filter dependency files
          lcov --remove coverage.info '.hunter/*' --output-file coverage.info # filter dependency files
          #- lcov --list coverage.info # debug info

          # Uploading report to CodeCov
          bash <(curl -s https://codecov.io/bash) -f coverage.info -t $CODECOV_TOKEN || echo "Codecov did not collect coverage reports" 
          
      - run: sudo umount build/test/btrfs || true
